package com.example.lynda1;

import android.content.Context;
import android.graphics.Canvas;
import android.graphics.Color;
import android.graphics.Paint;
import android.graphics.Rect;
import android.view.Display;
import android.view.MotionEvent;
import android.view.SurfaceHolder;
import android.view.WindowManager;

public class AnimThread extends Thread{
	
	private SurfaceHolder holder;
	private boolean running;
	private int i=0;
	private int j=0;
	Canvas canvas = null;
	WindowManager wm;
	Display display;
	
	Paint paint = new Paint();
	Rect myRectangle = new Rect();
	
	////////////////////////////////////////////////////////////
	////////////////////////////////////////////////////////////
	////////////////////////////////////////////////////////////
	
	float canwidth;// deprecated
	float canheight;  // deprecated
	int thick=10;
	int over=0;
	int binary=1;
	int clicked=0;
	int n_nx=Math.round(canwidth/thick);
	int n_ny=Math.round(canheight/thick);
	
	int[] stackx=new int[n_ny*n_nx];
	int[] stacky=new int[n_ny*n_nx];
	int[] stackm=new int[n_ny*n_nx];
	
	int ttop=-1;
	int curi=2;
	int curj=2;
	int cantgo=0,up=0,down=0,right=0,left=0;
	int move=1;

	Node[] answer;
	Node[][] nodes=new Node[n_ny][n_nx];
	
	int ran;
	int repf;
	
	///////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////
	
	
	public AnimThread(SurfaceHolder holder, Context cont) {
		this.holder = holder;
		wm = (WindowManager) cont.getSystemService(Context.WINDOW_SERVICE);
		display = wm.getDefaultDisplay();
		canwidth = display.getWidth();
		canheight = display.getHeight();
		
		for(int i=0;i<n_ny;i++)
			for(int j=0;j<n_nx;j++)
				nodes[i][j]=new Node(0,j*thick,i*thick,0);
					
			for(int i=0;i<n_ny;i++)
				{
				nodes[i][0].c=0;		
				nodes[i][n_nx-1].c=0;		
				nodes[i][0].v=1;
				nodes[i][n_nx-1].v=1;
				}	

			for(int i=0;i<n_nx;i++)
				{
				nodes[0][i].c=0;		
				nodes[n_ny-1][i].c=0;		
				nodes[0][i].v=1;
				nodes[n_ny-1][i].v=1;
				}	
				
			nodes[curi][curj].v=1;	
			nodes[curi][curj].c=0;	
			stackx[++ttop]=nodes[curi][curj].x;
			stacky[ttop]=nodes[curi][curj].y;
			stackm[ttop]=1;
		
			for(int i=0;i<n_ny;i++)
				for(int j=0;j<n_nx;j++)
					if(nodes[i][j].v==1)
					{
					paint.setColor(Color.RED);
					myRectangle.set(nodes[i][j].x,nodes[i][j].y,thick,thick);
				    canvas.drawRect(myRectangle, paint);
					}
			
			
		
	}
	
	@Override
	public void run() {
		// TODO Auto-generated method stub
		
		while(running ) {

            try {
            	canvas = holder.lockCanvas();
                synchronized (holder) {
                	doit();
                }	
            }
            finally {
                    if (canvas != null) {
                            holder.unlockCanvasAndPost(canvas);
                    }               
            }
        }
	}
	
	void setRunning(boolean b) {
		// TODO Auto-generated method stub
		running = b;
	}

	public void setxy(float x2, float y2) {
		// TODO Auto-generated method stub
		x = x2;
		y = y2;
	}
		
	private void doit() {
		
		
		
		
       	   canvas.drawColor(Color.BLACK);
           
           paint.setColor(Color.WHITE);
           canvas.drawCircle(x, y, 50, paint);
           
           
           
           
           
           
           
           
           
           
           
	}

	
}